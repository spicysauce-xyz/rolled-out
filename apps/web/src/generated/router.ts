/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../modules/root'
import { Route as authLayoutsGuestOnlyRouteImport } from './../modules/auth/layouts/guest-only'
import { Route as authLayoutsAuthorizedRouteImport } from './../modules/auth/layouts/authorized'
import { Route as authPagesLoginDotpageRouteImport } from './../modules/auth/pages/Login.page'
import { Route as dashboardLayoutsHasOrganizationRouteImport } from './../modules/dashboard/layouts/has-organization'
import { Route as onboardingPagesProfileRouteImport } from './../modules/onboarding/pages/profile'
import { Route as onboardingPagesOrganizationRouteImport } from './../modules/onboarding/pages/organization'
import { Route as dashboardLayoutsSelectedOrganizationRouteImport } from './../modules/dashboard/layouts/selected-organization'
import { Route as dashboardPagesSplashRouteImport } from './../modules/dashboard/pages/splash'
import { Route as dashboardLayoutsIndexRouteImport } from './../modules/dashboard/layouts/index'
import { Route as settingsLayoutsIndexRouteImport } from './../modules/settings/layouts/index'
import { Route as settingsPagesMembersIndexRouteImport } from './../modules/settings/pages/members/index'
import { Route as editorIndexRouteImport } from './../modules/editor/index'
import { Route as dashboardPagesUpdatesIndexRouteImport } from './../modules/dashboard/pages/updates/index'
import { Route as dashboardPagesIndexRouteImport } from './../modules/dashboard/pages/index'
import { Route as settingsPagesSessionsRouteImport } from './../modules/settings/pages/sessions'
import { Route as settingsPagesProfileRouteImport } from './../modules/settings/pages/profile'
import { Route as settingsPagesDetailsRouteImport } from './../modules/settings/pages/details'
import { Route as settingsPagesSplatRouteImport } from './../modules/settings/pages/splat'
import { Route as dashboardPagesContactsRouteImport } from './../modules/dashboard/pages/contacts'

const authLayoutsGuestOnlyRoute = authLayoutsGuestOnlyRouteImport.update({
  id: '/_guest-only',
  getParentRoute: () => rootRouteImport,
} as any)
const authLayoutsAuthorizedRoute = authLayoutsAuthorizedRouteImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesLoginDotpageRoute = authPagesLoginDotpageRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutsGuestOnlyRoute,
} as any)
const dashboardLayoutsHasOrganizationRoute =
  dashboardLayoutsHasOrganizationRouteImport.update({
    id: '/_has-organization',
    getParentRoute: () => authLayoutsAuthorizedRoute,
  } as any)
const onboardingPagesProfileRoute = onboardingPagesProfileRouteImport.update({
  id: '/onboarding/profile',
  path: '/onboarding/profile',
  getParentRoute: () => authLayoutsAuthorizedRoute,
} as any)
const onboardingPagesOrganizationRoute =
  onboardingPagesOrganizationRouteImport.update({
    id: '/onboarding/organization',
    path: '/onboarding/organization',
    getParentRoute: () => authLayoutsAuthorizedRoute,
  } as any)
const dashboardLayoutsSelectedOrganizationRoute =
  dashboardLayoutsSelectedOrganizationRouteImport.update({
    id: '/$organizationSlug',
    path: '/$organizationSlug',
    getParentRoute: () => dashboardLayoutsHasOrganizationRoute,
  } as any)
const dashboardPagesSplashRoute = dashboardPagesSplashRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardLayoutsHasOrganizationRoute,
} as any)
const dashboardLayoutsIndexRoute = dashboardLayoutsIndexRouteImport.update({
  id: '/_index',
  getParentRoute: () => dashboardLayoutsSelectedOrganizationRoute,
} as any)
const settingsLayoutsIndexRoute = settingsLayoutsIndexRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => dashboardLayoutsSelectedOrganizationRoute,
} as any)
const settingsPagesMembersIndexRoute =
  settingsPagesMembersIndexRouteImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => settingsLayoutsIndexRoute,
  } as any)
const editorIndexRoute = editorIndexRouteImport.update({
  id: '/editor/$id',
  path: '/editor/$id',
  getParentRoute: () => dashboardLayoutsSelectedOrganizationRoute,
} as any)
const dashboardPagesUpdatesIndexRoute =
  dashboardPagesUpdatesIndexRouteImport.update({
    id: '/updates',
    path: '/updates',
    getParentRoute: () => dashboardLayoutsIndexRoute,
  } as any)
const dashboardPagesIndexRoute = dashboardPagesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardLayoutsIndexRoute,
} as any)
const settingsPagesSessionsRoute = settingsPagesSessionsRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => settingsLayoutsIndexRoute,
} as any)
const settingsPagesProfileRoute = settingsPagesProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => settingsLayoutsIndexRoute,
} as any)
const settingsPagesDetailsRoute = settingsPagesDetailsRouteImport.update({
  id: '/details',
  path: '/details',
  getParentRoute: () => settingsLayoutsIndexRoute,
} as any)
const settingsPagesSplatRoute = settingsPagesSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => settingsLayoutsIndexRoute,
} as any)
const dashboardPagesContactsRoute = dashboardPagesContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => dashboardLayoutsIndexRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authPagesLoginDotpageRoute
  '/': typeof dashboardPagesSplashRoute
  '/$organizationSlug': typeof dashboardLayoutsIndexRouteWithChildren
  '/onboarding/organization': typeof onboardingPagesOrganizationRoute
  '/onboarding/profile': typeof onboardingPagesProfileRoute
  '/$organizationSlug/settings': typeof settingsLayoutsIndexRouteWithChildren
  '/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/$organizationSlug/settings/$': typeof settingsPagesSplatRoute
  '/$organizationSlug/settings/details': typeof settingsPagesDetailsRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
  '/$organizationSlug/': typeof dashboardPagesIndexRoute
  '/$organizationSlug/updates': typeof dashboardPagesUpdatesIndexRoute
  '/$organizationSlug/editor/$id': typeof editorIndexRoute
  '/$organizationSlug/settings/members': typeof settingsPagesMembersIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof authPagesLoginDotpageRoute
  '/': typeof dashboardPagesSplashRoute
  '/$organizationSlug': typeof dashboardPagesIndexRoute
  '/onboarding/organization': typeof onboardingPagesOrganizationRoute
  '/onboarding/profile': typeof onboardingPagesProfileRoute
  '/$organizationSlug/settings': typeof settingsLayoutsIndexRouteWithChildren
  '/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/$organizationSlug/settings/$': typeof settingsPagesSplatRoute
  '/$organizationSlug/settings/details': typeof settingsPagesDetailsRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
  '/$organizationSlug/updates': typeof dashboardPagesUpdatesIndexRoute
  '/$organizationSlug/editor/$id': typeof editorIndexRoute
  '/$organizationSlug/settings/members': typeof settingsPagesMembersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authorized': typeof authLayoutsAuthorizedRouteWithChildren
  '/_guest-only': typeof authLayoutsGuestOnlyRouteWithChildren
  '/_authorized/_has-organization': typeof dashboardLayoutsHasOrganizationRouteWithChildren
  '/_guest-only/login': typeof authPagesLoginDotpageRoute
  '/_authorized/_has-organization/': typeof dashboardPagesSplashRoute
  '/_authorized/_has-organization/$organizationSlug': typeof dashboardLayoutsSelectedOrganizationRouteWithChildren
  '/_authorized/onboarding/organization': typeof onboardingPagesOrganizationRoute
  '/_authorized/onboarding/profile': typeof onboardingPagesProfileRoute
  '/_authorized/_has-organization/$organizationSlug/_index': typeof dashboardLayoutsIndexRouteWithChildren
  '/_authorized/_has-organization/$organizationSlug/settings': typeof settingsLayoutsIndexRouteWithChildren
  '/_authorized/_has-organization/$organizationSlug/_index/contacts': typeof dashboardPagesContactsRoute
  '/_authorized/_has-organization/$organizationSlug/settings/$': typeof settingsPagesSplatRoute
  '/_authorized/_has-organization/$organizationSlug/settings/details': typeof settingsPagesDetailsRoute
  '/_authorized/_has-organization/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/_authorized/_has-organization/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
  '/_authorized/_has-organization/$organizationSlug/_index/': typeof dashboardPagesIndexRoute
  '/_authorized/_has-organization/$organizationSlug/_index/updates': typeof dashboardPagesUpdatesIndexRoute
  '/_authorized/_has-organization/$organizationSlug/editor/$id': typeof editorIndexRoute
  '/_authorized/_has-organization/$organizationSlug/settings/members': typeof settingsPagesMembersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/'
    | '/$organizationSlug'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/details'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
    | '/$organizationSlug/'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/members'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/'
    | '/$organizationSlug'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/details'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/members'
  id:
    | '__root__'
    | '/_authorized'
    | '/_guest-only'
    | '/_authorized/_has-organization'
    | '/_guest-only/login'
    | '/_authorized/_has-organization/'
    | '/_authorized/_has-organization/$organizationSlug'
    | '/_authorized/onboarding/organization'
    | '/_authorized/onboarding/profile'
    | '/_authorized/_has-organization/$organizationSlug/_index'
    | '/_authorized/_has-organization/$organizationSlug/settings'
    | '/_authorized/_has-organization/$organizationSlug/_index/contacts'
    | '/_authorized/_has-organization/$organizationSlug/settings/$'
    | '/_authorized/_has-organization/$organizationSlug/settings/details'
    | '/_authorized/_has-organization/$organizationSlug/settings/profile'
    | '/_authorized/_has-organization/$organizationSlug/settings/sessions'
    | '/_authorized/_has-organization/$organizationSlug/_index/'
    | '/_authorized/_has-organization/$organizationSlug/_index/updates'
    | '/_authorized/_has-organization/$organizationSlug/editor/$id'
    | '/_authorized/_has-organization/$organizationSlug/settings/members'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authLayoutsAuthorizedRoute: typeof authLayoutsAuthorizedRouteWithChildren
  authLayoutsGuestOnlyRoute: typeof authLayoutsGuestOnlyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest-only': {
      id: '/_guest-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authLayoutsGuestOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authLayoutsAuthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest-only/login': {
      id: '/_guest-only/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginDotpageRouteImport
      parentRoute: typeof authLayoutsGuestOnlyRoute
    }
    '/_authorized/_has-organization': {
      id: '/_authorized/_has-organization'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof dashboardLayoutsHasOrganizationRouteImport
      parentRoute: typeof authLayoutsAuthorizedRoute
    }
    '/_authorized/onboarding/profile': {
      id: '/_authorized/onboarding/profile'
      path: '/onboarding/profile'
      fullPath: '/onboarding/profile'
      preLoaderRoute: typeof onboardingPagesProfileRouteImport
      parentRoute: typeof authLayoutsAuthorizedRoute
    }
    '/_authorized/onboarding/organization': {
      id: '/_authorized/onboarding/organization'
      path: '/onboarding/organization'
      fullPath: '/onboarding/organization'
      preLoaderRoute: typeof onboardingPagesOrganizationRouteImport
      parentRoute: typeof authLayoutsAuthorizedRoute
    }
    '/_authorized/_has-organization/$organizationSlug': {
      id: '/_authorized/_has-organization/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof dashboardLayoutsSelectedOrganizationRouteImport
      parentRoute: typeof dashboardLayoutsHasOrganizationRoute
    }
    '/_authorized/_has-organization/': {
      id: '/_authorized/_has-organization/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardPagesSplashRouteImport
      parentRoute: typeof dashboardLayoutsHasOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_index': {
      id: '/_authorized/_has-organization/$organizationSlug/_index'
      path: ''
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof dashboardLayoutsIndexRouteImport
      parentRoute: typeof dashboardLayoutsSelectedOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings': {
      id: '/_authorized/_has-organization/$organizationSlug/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof settingsLayoutsIndexRouteImport
      parentRoute: typeof dashboardLayoutsSelectedOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/members': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/members'
      path: '/members'
      fullPath: '/$organizationSlug/settings/members'
      preLoaderRoute: typeof settingsPagesMembersIndexRouteImport
      parentRoute: typeof settingsLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/editor/$id': {
      id: '/_authorized/_has-organization/$organizationSlug/editor/$id'
      path: '/editor/$id'
      fullPath: '/$organizationSlug/editor/$id'
      preLoaderRoute: typeof editorIndexRouteImport
      parentRoute: typeof dashboardLayoutsSelectedOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_index/updates': {
      id: '/_authorized/_has-organization/$organizationSlug/_index/updates'
      path: '/updates'
      fullPath: '/$organizationSlug/updates'
      preLoaderRoute: typeof dashboardPagesUpdatesIndexRouteImport
      parentRoute: typeof dashboardLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_index/': {
      id: '/_authorized/_has-organization/$organizationSlug/_index/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof dashboardPagesIndexRouteImport
      parentRoute: typeof dashboardLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/sessions': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/sessions'
      path: '/sessions'
      fullPath: '/$organizationSlug/settings/sessions'
      preLoaderRoute: typeof settingsPagesSessionsRouteImport
      parentRoute: typeof settingsLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/profile': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/profile'
      path: '/profile'
      fullPath: '/$organizationSlug/settings/profile'
      preLoaderRoute: typeof settingsPagesProfileRouteImport
      parentRoute: typeof settingsLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/details': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/details'
      path: '/details'
      fullPath: '/$organizationSlug/settings/details'
      preLoaderRoute: typeof settingsPagesDetailsRouteImport
      parentRoute: typeof settingsLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/$': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/$'
      path: '/$'
      fullPath: '/$organizationSlug/settings/$'
      preLoaderRoute: typeof settingsPagesSplatRouteImport
      parentRoute: typeof settingsLayoutsIndexRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_index/contacts': {
      id: '/_authorized/_has-organization/$organizationSlug/_index/contacts'
      path: '/contacts'
      fullPath: '/$organizationSlug/contacts'
      preLoaderRoute: typeof dashboardPagesContactsRouteImport
      parentRoute: typeof dashboardLayoutsIndexRoute
    }
  }
}

interface dashboardLayoutsIndexRouteChildren {
  dashboardPagesContactsRoute: typeof dashboardPagesContactsRoute
  dashboardPagesIndexRoute: typeof dashboardPagesIndexRoute
  dashboardPagesUpdatesIndexRoute: typeof dashboardPagesUpdatesIndexRoute
}

const dashboardLayoutsIndexRouteChildren: dashboardLayoutsIndexRouteChildren = {
  dashboardPagesContactsRoute: dashboardPagesContactsRoute,
  dashboardPagesIndexRoute: dashboardPagesIndexRoute,
  dashboardPagesUpdatesIndexRoute: dashboardPagesUpdatesIndexRoute,
}

const dashboardLayoutsIndexRouteWithChildren =
  dashboardLayoutsIndexRoute._addFileChildren(
    dashboardLayoutsIndexRouteChildren,
  )

interface settingsLayoutsIndexRouteChildren {
  settingsPagesSplatRoute: typeof settingsPagesSplatRoute
  settingsPagesDetailsRoute: typeof settingsPagesDetailsRoute
  settingsPagesProfileRoute: typeof settingsPagesProfileRoute
  settingsPagesSessionsRoute: typeof settingsPagesSessionsRoute
  settingsPagesMembersIndexRoute: typeof settingsPagesMembersIndexRoute
}

const settingsLayoutsIndexRouteChildren: settingsLayoutsIndexRouteChildren = {
  settingsPagesSplatRoute: settingsPagesSplatRoute,
  settingsPagesDetailsRoute: settingsPagesDetailsRoute,
  settingsPagesProfileRoute: settingsPagesProfileRoute,
  settingsPagesSessionsRoute: settingsPagesSessionsRoute,
  settingsPagesMembersIndexRoute: settingsPagesMembersIndexRoute,
}

const settingsLayoutsIndexRouteWithChildren =
  settingsLayoutsIndexRoute._addFileChildren(settingsLayoutsIndexRouteChildren)

interface dashboardLayoutsSelectedOrganizationRouteChildren {
  dashboardLayoutsIndexRoute: typeof dashboardLayoutsIndexRouteWithChildren
  settingsLayoutsIndexRoute: typeof settingsLayoutsIndexRouteWithChildren
  editorIndexRoute: typeof editorIndexRoute
}

const dashboardLayoutsSelectedOrganizationRouteChildren: dashboardLayoutsSelectedOrganizationRouteChildren =
  {
    dashboardLayoutsIndexRoute: dashboardLayoutsIndexRouteWithChildren,
    settingsLayoutsIndexRoute: settingsLayoutsIndexRouteWithChildren,
    editorIndexRoute: editorIndexRoute,
  }

const dashboardLayoutsSelectedOrganizationRouteWithChildren =
  dashboardLayoutsSelectedOrganizationRoute._addFileChildren(
    dashboardLayoutsSelectedOrganizationRouteChildren,
  )

interface dashboardLayoutsHasOrganizationRouteChildren {
  dashboardPagesSplashRoute: typeof dashboardPagesSplashRoute
  dashboardLayoutsSelectedOrganizationRoute: typeof dashboardLayoutsSelectedOrganizationRouteWithChildren
}

const dashboardLayoutsHasOrganizationRouteChildren: dashboardLayoutsHasOrganizationRouteChildren =
  {
    dashboardPagesSplashRoute: dashboardPagesSplashRoute,
    dashboardLayoutsSelectedOrganizationRoute:
      dashboardLayoutsSelectedOrganizationRouteWithChildren,
  }

const dashboardLayoutsHasOrganizationRouteWithChildren =
  dashboardLayoutsHasOrganizationRoute._addFileChildren(
    dashboardLayoutsHasOrganizationRouteChildren,
  )

interface authLayoutsAuthorizedRouteChildren {
  dashboardLayoutsHasOrganizationRoute: typeof dashboardLayoutsHasOrganizationRouteWithChildren
  onboardingPagesOrganizationRoute: typeof onboardingPagesOrganizationRoute
  onboardingPagesProfileRoute: typeof onboardingPagesProfileRoute
}

const authLayoutsAuthorizedRouteChildren: authLayoutsAuthorizedRouteChildren = {
  dashboardLayoutsHasOrganizationRoute:
    dashboardLayoutsHasOrganizationRouteWithChildren,
  onboardingPagesOrganizationRoute: onboardingPagesOrganizationRoute,
  onboardingPagesProfileRoute: onboardingPagesProfileRoute,
}

const authLayoutsAuthorizedRouteWithChildren =
  authLayoutsAuthorizedRoute._addFileChildren(
    authLayoutsAuthorizedRouteChildren,
  )

interface authLayoutsGuestOnlyRouteChildren {
  authPagesLoginDotpageRoute: typeof authPagesLoginDotpageRoute
}

const authLayoutsGuestOnlyRouteChildren: authLayoutsGuestOnlyRouteChildren = {
  authPagesLoginDotpageRoute: authPagesLoginDotpageRoute,
}

const authLayoutsGuestOnlyRouteWithChildren =
  authLayoutsGuestOnlyRoute._addFileChildren(authLayoutsGuestOnlyRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authLayoutsAuthorizedRoute: authLayoutsAuthorizedRouteWithChildren,
  authLayoutsGuestOnlyRoute: authLayoutsGuestOnlyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
