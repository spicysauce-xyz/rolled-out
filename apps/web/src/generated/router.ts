/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../modules/root'
import { Route as authSignupImport } from './../modules/auth/signup'
import { Route as authLoginImport } from './../modules/auth/login'
import { Route as authAuthorizedImport } from './../modules/auth/authorized'
import { Route as dashboardLayoutImport } from './../modules/dashboard/layout'
import { Route as dashboardPagesIndexImport } from './../modules/dashboard/pages/index'
import { Route as settingsLayoutImport } from './../modules/settings/layout'
import { Route as dashboardPagesUpdatesUpdatesImport } from './../modules/dashboard/pages/updates/updates'
import { Route as dashboardPagesContactsImport } from './../modules/dashboard/pages/contacts'
import { Route as settingsPagesSessionsImport } from './../modules/settings/pages/sessions'
import { Route as settingsPagesProfileImport } from './../modules/settings/pages/profile'
import { Route as settingsSplatImport } from './../modules/settings/splat'
import { Route as editorPagesIdImport } from './../modules/editor/pages/$id'

// Create Virtual Routes

const AuthorizedOrganizationSlugImport = createFileRoute(
  '/_authorized/$organizationSlug_',
)()
const AuthorizedOrganizationSlugEditorImport = createFileRoute(
  '/_authorized/$organizationSlug_/editor',
)()

// Create/Update Routes

const authSignupRoute = authSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authAuthorizedRoute = authAuthorizedImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedOrganizationSlugRoute = AuthorizedOrganizationSlugImport.update(
  {
    id: '/$organizationSlug_',
    path: '/$organizationSlug',
    getParentRoute: () => authAuthorizedRoute,
  } as any,
)

const dashboardLayoutRoute = dashboardLayoutImport.update({
  id: '/$organizationSlug',
  path: '/$organizationSlug',
  getParentRoute: () => authAuthorizedRoute,
} as any)

const dashboardPagesIndexRoute = dashboardPagesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

const settingsLayoutRoute = settingsLayoutImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthorizedOrganizationSlugRoute,
} as any)

const AuthorizedOrganizationSlugEditorRoute =
  AuthorizedOrganizationSlugEditorImport.update({
    id: '/editor',
    path: '/editor',
    getParentRoute: () => AuthorizedOrganizationSlugRoute,
  } as any)

const dashboardPagesUpdatesUpdatesRoute =
  dashboardPagesUpdatesUpdatesImport.update({
    id: '/updates',
    path: '/updates',
    getParentRoute: () => dashboardLayoutRoute,
  } as any)

const dashboardPagesContactsRoute = dashboardPagesContactsImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

const settingsPagesSessionsRoute = settingsPagesSessionsImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => settingsLayoutRoute,
} as any)

const settingsPagesProfileRoute = settingsPagesProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => settingsLayoutRoute,
} as any)

const settingsSplatRoute = settingsSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => settingsLayoutRoute,
} as any)

const editorPagesIdRoute = editorPagesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthorizedOrganizationSlugEditorRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authAuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/_authorized/$organizationSlug': {
      id: '/_authorized/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof dashboardLayoutImport
      parentRoute: typeof authAuthorizedImport
    }
    '/_authorized/$organizationSlug_': {
      id: '/_authorized/$organizationSlug_'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof AuthorizedOrganizationSlugImport
      parentRoute: typeof authAuthorizedImport
    }
    '/_authorized/$organizationSlug/contacts': {
      id: '/_authorized/$organizationSlug/contacts'
      path: '/contacts'
      fullPath: '/$organizationSlug/contacts'
      preLoaderRoute: typeof dashboardPagesContactsImport
      parentRoute: typeof dashboardLayoutImport
    }
    '/_authorized/$organizationSlug/updates': {
      id: '/_authorized/$organizationSlug/updates'
      path: '/updates'
      fullPath: '/$organizationSlug/updates'
      preLoaderRoute: typeof dashboardPagesUpdatesUpdatesImport
      parentRoute: typeof dashboardLayoutImport
    }
    '/_authorized/$organizationSlug_/editor': {
      id: '/_authorized/$organizationSlug_/editor'
      path: '/editor'
      fullPath: '/$organizationSlug/editor'
      preLoaderRoute: typeof AuthorizedOrganizationSlugEditorImport
      parentRoute: typeof AuthorizedOrganizationSlugImport
    }
    '/_authorized/$organizationSlug_/settings': {
      id: '/_authorized/$organizationSlug_/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof settingsLayoutImport
      parentRoute: typeof AuthorizedOrganizationSlugImport
    }
    '/_authorized/$organizationSlug/': {
      id: '/_authorized/$organizationSlug/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof dashboardPagesIndexImport
      parentRoute: typeof dashboardLayoutImport
    }
    '/_authorized/$organizationSlug_/editor/$id': {
      id: '/_authorized/$organizationSlug_/editor/$id'
      path: '/$id'
      fullPath: '/$organizationSlug/editor/$id'
      preLoaderRoute: typeof editorPagesIdImport
      parentRoute: typeof AuthorizedOrganizationSlugEditorImport
    }
    '/_authorized/$organizationSlug_/settings/$': {
      id: '/_authorized/$organizationSlug_/settings/$'
      path: '/$'
      fullPath: '/$organizationSlug/settings/$'
      preLoaderRoute: typeof settingsSplatImport
      parentRoute: typeof settingsLayoutImport
    }
    '/_authorized/$organizationSlug_/settings/profile': {
      id: '/_authorized/$organizationSlug_/settings/profile'
      path: '/profile'
      fullPath: '/$organizationSlug/settings/profile'
      preLoaderRoute: typeof settingsPagesProfileImport
      parentRoute: typeof settingsLayoutImport
    }
    '/_authorized/$organizationSlug_/settings/sessions': {
      id: '/_authorized/$organizationSlug_/settings/sessions'
      path: '/sessions'
      fullPath: '/$organizationSlug/settings/sessions'
      preLoaderRoute: typeof settingsPagesSessionsImport
      parentRoute: typeof settingsLayoutImport
    }
  }
}

// Create and export the route tree

interface dashboardLayoutRouteChildren {
  dashboardPagesContactsRoute: typeof dashboardPagesContactsRoute
  dashboardPagesUpdatesUpdatesRoute: typeof dashboardPagesUpdatesUpdatesRoute
  dashboardPagesIndexRoute: typeof dashboardPagesIndexRoute
}

const dashboardLayoutRouteChildren: dashboardLayoutRouteChildren = {
  dashboardPagesContactsRoute: dashboardPagesContactsRoute,
  dashboardPagesUpdatesUpdatesRoute: dashboardPagesUpdatesUpdatesRoute,
  dashboardPagesIndexRoute: dashboardPagesIndexRoute,
}

const dashboardLayoutRouteWithChildren = dashboardLayoutRoute._addFileChildren(
  dashboardLayoutRouteChildren,
)

interface AuthorizedOrganizationSlugEditorRouteChildren {
  editorPagesIdRoute: typeof editorPagesIdRoute
}

const AuthorizedOrganizationSlugEditorRouteChildren: AuthorizedOrganizationSlugEditorRouteChildren =
  {
    editorPagesIdRoute: editorPagesIdRoute,
  }

const AuthorizedOrganizationSlugEditorRouteWithChildren =
  AuthorizedOrganizationSlugEditorRoute._addFileChildren(
    AuthorizedOrganizationSlugEditorRouteChildren,
  )

interface settingsLayoutRouteChildren {
  settingsSplatRoute: typeof settingsSplatRoute
  settingsPagesProfileRoute: typeof settingsPagesProfileRoute
  settingsPagesSessionsRoute: typeof settingsPagesSessionsRoute
}

const settingsLayoutRouteChildren: settingsLayoutRouteChildren = {
  settingsSplatRoute: settingsSplatRoute,
  settingsPagesProfileRoute: settingsPagesProfileRoute,
  settingsPagesSessionsRoute: settingsPagesSessionsRoute,
}

const settingsLayoutRouteWithChildren = settingsLayoutRoute._addFileChildren(
  settingsLayoutRouteChildren,
)

interface AuthorizedOrganizationSlugRouteChildren {
  AuthorizedOrganizationSlugEditorRoute: typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  settingsLayoutRoute: typeof settingsLayoutRouteWithChildren
}

const AuthorizedOrganizationSlugRouteChildren: AuthorizedOrganizationSlugRouteChildren =
  {
    AuthorizedOrganizationSlugEditorRoute:
      AuthorizedOrganizationSlugEditorRouteWithChildren,
    settingsLayoutRoute: settingsLayoutRouteWithChildren,
  }

const AuthorizedOrganizationSlugRouteWithChildren =
  AuthorizedOrganizationSlugRoute._addFileChildren(
    AuthorizedOrganizationSlugRouteChildren,
  )

interface authAuthorizedRouteChildren {
  dashboardLayoutRoute: typeof dashboardLayoutRouteWithChildren
  AuthorizedOrganizationSlugRoute: typeof AuthorizedOrganizationSlugRouteWithChildren
}

const authAuthorizedRouteChildren: authAuthorizedRouteChildren = {
  dashboardLayoutRoute: dashboardLayoutRouteWithChildren,
  AuthorizedOrganizationSlugRoute: AuthorizedOrganizationSlugRouteWithChildren,
}

const authAuthorizedRouteWithChildren = authAuthorizedRoute._addFileChildren(
  authAuthorizedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof authAuthorizedRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/$organizationSlug': typeof AuthorizedOrganizationSlugRouteWithChildren
  '/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/$organizationSlug/updates': typeof dashboardPagesUpdatesUpdatesRoute
  '/$organizationSlug/editor': typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  '/$organizationSlug/settings': typeof settingsLayoutRouteWithChildren
  '/$organizationSlug/': typeof dashboardPagesIndexRoute
  '/$organizationSlug/editor/$id': typeof editorPagesIdRoute
  '/$organizationSlug/settings/$': typeof settingsSplatRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
}

export interface FileRoutesByTo {
  '': typeof authAuthorizedRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/$organizationSlug': typeof dashboardPagesIndexRoute
  '/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/$organizationSlug/updates': typeof dashboardPagesUpdatesUpdatesRoute
  '/$organizationSlug/editor': typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  '/$organizationSlug/settings': typeof settingsLayoutRouteWithChildren
  '/$organizationSlug/editor/$id': typeof editorPagesIdRoute
  '/$organizationSlug/settings/$': typeof settingsSplatRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authorized': typeof authAuthorizedRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/_authorized/$organizationSlug': typeof dashboardLayoutRouteWithChildren
  '/_authorized/$organizationSlug_': typeof AuthorizedOrganizationSlugRouteWithChildren
  '/_authorized/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/_authorized/$organizationSlug/updates': typeof dashboardPagesUpdatesUpdatesRoute
  '/_authorized/$organizationSlug_/editor': typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  '/_authorized/$organizationSlug_/settings': typeof settingsLayoutRouteWithChildren
  '/_authorized/$organizationSlug/': typeof dashboardPagesIndexRoute
  '/_authorized/$organizationSlug_/editor/$id': typeof editorPagesIdRoute
  '/_authorized/$organizationSlug_/settings/$': typeof settingsSplatRoute
  '/_authorized/$organizationSlug_/settings/profile': typeof settingsPagesProfileRoute
  '/_authorized/$organizationSlug_/settings/sessions': typeof settingsPagesSessionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/$organizationSlug'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/editor'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/signup'
    | '/$organizationSlug'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/editor'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
  id:
    | '__root__'
    | '/_authorized'
    | '/login'
    | '/signup'
    | '/_authorized/$organizationSlug'
    | '/_authorized/$organizationSlug_'
    | '/_authorized/$organizationSlug/contacts'
    | '/_authorized/$organizationSlug/updates'
    | '/_authorized/$organizationSlug_/editor'
    | '/_authorized/$organizationSlug_/settings'
    | '/_authorized/$organizationSlug/'
    | '/_authorized/$organizationSlug_/editor/$id'
    | '/_authorized/$organizationSlug_/settings/$'
    | '/_authorized/$organizationSlug_/settings/profile'
    | '/_authorized/$organizationSlug_/settings/sessions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authAuthorizedRoute: typeof authAuthorizedRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  authAuthorizedRoute: authAuthorizedRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "root.tsx",
      "children": [
        "/_authorized",
        "/login",
        "/signup"
      ]
    },
    "/_authorized": {
      "filePath": "auth/authorized.tsx",
      "children": [
        "/_authorized/$organizationSlug",
        "/_authorized/$organizationSlug_"
      ]
    },
    "/login": {
      "filePath": "auth/login.tsx"
    },
    "/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/_authorized/$organizationSlug": {
      "filePath": "dashboard/layout.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/$organizationSlug/contacts",
        "/_authorized/$organizationSlug/updates",
        "/_authorized/$organizationSlug/"
      ]
    },
    "/_authorized/$organizationSlug_": {
      "filePath": "",
      "parent": "/_authorized",
      "children": [
        "/_authorized/$organizationSlug_/editor",
        "/_authorized/$organizationSlug_/settings"
      ]
    },
    "/_authorized/$organizationSlug/contacts": {
      "filePath": "dashboard/pages/contacts.tsx",
      "parent": "/_authorized/$organizationSlug"
    },
    "/_authorized/$organizationSlug/updates": {
      "filePath": "dashboard/pages/updates/updates.tsx",
      "parent": "/_authorized/$organizationSlug"
    },
    "/_authorized/$organizationSlug_/editor": {
      "filePath": "",
      "parent": "/_authorized/$organizationSlug_",
      "children": [
        "/_authorized/$organizationSlug_/editor/$id"
      ]
    },
    "/_authorized/$organizationSlug_/settings": {
      "filePath": "settings/layout.tsx",
      "parent": "/_authorized/$organizationSlug_",
      "children": [
        "/_authorized/$organizationSlug_/settings/$",
        "/_authorized/$organizationSlug_/settings/profile",
        "/_authorized/$organizationSlug_/settings/sessions"
      ]
    },
    "/_authorized/$organizationSlug/": {
      "filePath": "dashboard/pages/index.tsx",
      "parent": "/_authorized/$organizationSlug"
    },
    "/_authorized/$organizationSlug_/editor/$id": {
      "filePath": "editor/pages/$id.tsx",
      "parent": "/_authorized/$organizationSlug_/editor"
    },
    "/_authorized/$organizationSlug_/settings/$": {
      "filePath": "settings/splat.tsx",
      "parent": "/_authorized/$organizationSlug_/settings"
    },
    "/_authorized/$organizationSlug_/settings/profile": {
      "filePath": "settings/pages/profile.tsx",
      "parent": "/_authorized/$organizationSlug_/settings"
    },
    "/_authorized/$organizationSlug_/settings/sessions": {
      "filePath": "settings/pages/sessions.tsx",
      "parent": "/_authorized/$organizationSlug_/settings"
    }
  }
}
ROUTE_MANIFEST_END */
