/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../modules/root'
import { Route as authGuardsGuestOnlyRouteImport } from './../modules/auth/guards/guest-only'
import { Route as authGuardsAuthorizedRouteImport } from './../modules/auth/guards/authorized'
import { Route as authPagesLoginRouteImport } from './../modules/auth/pages/login'
import { Route as dashboardGuardsHasOrganizationRouteImport } from './../modules/dashboard/guards/has-organization'
import { Route as onboardingPagesProfileRouteImport } from './../modules/onboarding/pages/profile'
import { Route as onboardingPagesOrganizationRouteImport } from './../modules/onboarding/pages/organization'
import { Route as dashboardGuardsSelectedOrganizationRouteImport } from './../modules/dashboard/guards/selected-organization'
import { Route as dashboardPagesIndexPageRouteImport } from './../modules/dashboard/pages/index/page'
import { Route as settingsLayoutRouteImport } from './../modules/settings/layout'
import { Route as dashboardLayoutRouteImport } from './../modules/dashboard/layout'
import { Route as editorIndexRouteImport } from './../modules/editor/index'
import { Route as settingsPagesSessionsPageRouteImport } from './../modules/settings/pages/sessions/page'
import { Route as settingsPagesProfilePageRouteImport } from './../modules/settings/pages/profile/page'
import { Route as settingsPagesMembersPageRouteImport } from './../modules/settings/pages/members/page'
import { Route as settingsPagesDetailsPageRouteImport } from './../modules/settings/pages/details/page'
import { Route as settingsPagesSplatPageRouteImport } from './../modules/settings/pages/splat/page'
import { Route as dashboardPagesContactsPageRouteImport } from './../modules/dashboard/pages/contacts/page'
import { Route as dashboardPagesAnalyticsPageRouteImport } from './../modules/dashboard/pages/analytics/page'
import { Route as dashboardPagesUpdatesPageRouteImport } from './../modules/dashboard/pages/updates/page'
import { Route as dashboardPagesBoardPageRouteImport } from './../modules/dashboard/pages/board/page'

const authGuardsGuestOnlyRoute = authGuardsGuestOnlyRouteImport.update({
  id: '/_guest-only',
  getParentRoute: () => rootRouteImport,
} as any)
const authGuardsAuthorizedRoute = authGuardsAuthorizedRouteImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRouteImport,
} as any)
const authPagesLoginRoute = authPagesLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authGuardsGuestOnlyRoute,
} as any)
const dashboardGuardsHasOrganizationRoute =
  dashboardGuardsHasOrganizationRouteImport.update({
    id: '/_has-organization',
    getParentRoute: () => authGuardsAuthorizedRoute,
  } as any)
const onboardingPagesProfileRoute = onboardingPagesProfileRouteImport.update({
  id: '/onboarding/profile',
  path: '/onboarding/profile',
  getParentRoute: () => authGuardsAuthorizedRoute,
} as any)
const onboardingPagesOrganizationRoute =
  onboardingPagesOrganizationRouteImport.update({
    id: '/onboarding/organization',
    path: '/onboarding/organization',
    getParentRoute: () => authGuardsAuthorizedRoute,
  } as any)
const dashboardGuardsSelectedOrganizationRoute =
  dashboardGuardsSelectedOrganizationRouteImport.update({
    id: '/$organizationSlug',
    path: '/$organizationSlug',
    getParentRoute: () => dashboardGuardsHasOrganizationRoute,
  } as any)
const dashboardPagesIndexPageRoute = dashboardPagesIndexPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardGuardsHasOrganizationRoute,
} as any)
const settingsLayoutRoute = settingsLayoutRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => dashboardGuardsSelectedOrganizationRoute,
} as any)
const dashboardLayoutRoute = dashboardLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => dashboardGuardsSelectedOrganizationRoute,
} as any)
const editorIndexRoute = editorIndexRouteImport.update({
  id: '/editor/$id',
  path: '/editor/$id',
  getParentRoute: () => dashboardGuardsSelectedOrganizationRoute,
} as any)
const settingsPagesSessionsPageRoute =
  settingsPagesSessionsPageRouteImport.update({
    id: '/sessions',
    path: '/sessions',
    getParentRoute: () => settingsLayoutRoute,
  } as any)
const settingsPagesProfilePageRoute =
  settingsPagesProfilePageRouteImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => settingsLayoutRoute,
  } as any)
const settingsPagesMembersPageRoute =
  settingsPagesMembersPageRouteImport.update({
    id: '/members',
    path: '/members',
    getParentRoute: () => settingsLayoutRoute,
  } as any)
const settingsPagesDetailsPageRoute =
  settingsPagesDetailsPageRouteImport.update({
    id: '/details',
    path: '/details',
    getParentRoute: () => settingsLayoutRoute,
  } as any)
const settingsPagesSplatPageRoute = settingsPagesSplatPageRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => settingsLayoutRoute,
} as any)
const dashboardPagesContactsPageRoute =
  dashboardPagesContactsPageRouteImport.update({
    id: '/contacts',
    path: '/contacts',
    getParentRoute: () => dashboardLayoutRoute,
  } as any)
const dashboardPagesAnalyticsPageRoute =
  dashboardPagesAnalyticsPageRouteImport.update({
    id: '/analytics',
    path: '/analytics',
    getParentRoute: () => dashboardLayoutRoute,
  } as any)
const dashboardPagesUpdatesPageRoute =
  dashboardPagesUpdatesPageRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => dashboardLayoutRoute,
  } as any)
const dashboardPagesBoardPageRoute = dashboardPagesBoardPageRouteImport.update({
  id: '/boards/$id',
  path: '/boards/$id',
  getParentRoute: () => dashboardLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authPagesLoginRoute
  '/': typeof dashboardPagesIndexPageRoute
  '/$organizationSlug': typeof dashboardLayoutRouteWithChildren
  '/onboarding/organization': typeof onboardingPagesOrganizationRoute
  '/onboarding/profile': typeof onboardingPagesProfileRoute
  '/$organizationSlug/settings': typeof settingsLayoutRouteWithChildren
  '/$organizationSlug/': typeof dashboardPagesUpdatesPageRoute
  '/$organizationSlug/analytics': typeof dashboardPagesAnalyticsPageRoute
  '/$organizationSlug/contacts': typeof dashboardPagesContactsPageRoute
  '/$organizationSlug/settings/$': typeof settingsPagesSplatPageRoute
  '/$organizationSlug/settings/details': typeof settingsPagesDetailsPageRoute
  '/$organizationSlug/settings/members': typeof settingsPagesMembersPageRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfilePageRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsPageRoute
  '/$organizationSlug/editor/$id': typeof editorIndexRoute
  '/$organizationSlug/boards/$id': typeof dashboardPagesBoardPageRoute
}
export interface FileRoutesByTo {
  '/login': typeof authPagesLoginRoute
  '/': typeof dashboardPagesIndexPageRoute
  '/$organizationSlug': typeof dashboardPagesUpdatesPageRoute
  '/onboarding/organization': typeof onboardingPagesOrganizationRoute
  '/onboarding/profile': typeof onboardingPagesProfileRoute
  '/$organizationSlug/settings': typeof settingsLayoutRouteWithChildren
  '/$organizationSlug/analytics': typeof dashboardPagesAnalyticsPageRoute
  '/$organizationSlug/contacts': typeof dashboardPagesContactsPageRoute
  '/$organizationSlug/settings/$': typeof settingsPagesSplatPageRoute
  '/$organizationSlug/settings/details': typeof settingsPagesDetailsPageRoute
  '/$organizationSlug/settings/members': typeof settingsPagesMembersPageRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfilePageRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsPageRoute
  '/$organizationSlug/editor/$id': typeof editorIndexRoute
  '/$organizationSlug/boards/$id': typeof dashboardPagesBoardPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authorized': typeof authGuardsAuthorizedRouteWithChildren
  '/_guest-only': typeof authGuardsGuestOnlyRouteWithChildren
  '/_authorized/_has-organization': typeof dashboardGuardsHasOrganizationRouteWithChildren
  '/_guest-only/login': typeof authPagesLoginRoute
  '/_authorized/_has-organization/': typeof dashboardPagesIndexPageRoute
  '/_authorized/_has-organization/$organizationSlug': typeof dashboardGuardsSelectedOrganizationRouteWithChildren
  '/_authorized/onboarding/organization': typeof onboardingPagesOrganizationRoute
  '/_authorized/onboarding/profile': typeof onboardingPagesProfileRoute
  '/_authorized/_has-organization/$organizationSlug/_layout': typeof dashboardLayoutRouteWithChildren
  '/_authorized/_has-organization/$organizationSlug/settings': typeof settingsLayoutRouteWithChildren
  '/_authorized/_has-organization/$organizationSlug/_layout/': typeof dashboardPagesUpdatesPageRoute
  '/_authorized/_has-organization/$organizationSlug/_layout/analytics': typeof dashboardPagesAnalyticsPageRoute
  '/_authorized/_has-organization/$organizationSlug/_layout/contacts': typeof dashboardPagesContactsPageRoute
  '/_authorized/_has-organization/$organizationSlug/settings/$': typeof settingsPagesSplatPageRoute
  '/_authorized/_has-organization/$organizationSlug/settings/details': typeof settingsPagesDetailsPageRoute
  '/_authorized/_has-organization/$organizationSlug/settings/members': typeof settingsPagesMembersPageRoute
  '/_authorized/_has-organization/$organizationSlug/settings/profile': typeof settingsPagesProfilePageRoute
  '/_authorized/_has-organization/$organizationSlug/settings/sessions': typeof settingsPagesSessionsPageRoute
  '/_authorized/_has-organization/$organizationSlug/editor/$id': typeof editorIndexRoute
  '/_authorized/_has-organization/$organizationSlug/_layout/boards/$id': typeof dashboardPagesBoardPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/'
    | '/$organizationSlug'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/'
    | '/$organizationSlug/analytics'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/details'
    | '/$organizationSlug/settings/members'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/boards/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/'
    | '/$organizationSlug'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/analytics'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/details'
    | '/$organizationSlug/settings/members'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/boards/$id'
  id:
    | '__root__'
    | '/_authorized'
    | '/_guest-only'
    | '/_authorized/_has-organization'
    | '/_guest-only/login'
    | '/_authorized/_has-organization/'
    | '/_authorized/_has-organization/$organizationSlug'
    | '/_authorized/onboarding/organization'
    | '/_authorized/onboarding/profile'
    | '/_authorized/_has-organization/$organizationSlug/_layout'
    | '/_authorized/_has-organization/$organizationSlug/settings'
    | '/_authorized/_has-organization/$organizationSlug/_layout/'
    | '/_authorized/_has-organization/$organizationSlug/_layout/analytics'
    | '/_authorized/_has-organization/$organizationSlug/_layout/contacts'
    | '/_authorized/_has-organization/$organizationSlug/settings/$'
    | '/_authorized/_has-organization/$organizationSlug/settings/details'
    | '/_authorized/_has-organization/$organizationSlug/settings/members'
    | '/_authorized/_has-organization/$organizationSlug/settings/profile'
    | '/_authorized/_has-organization/$organizationSlug/settings/sessions'
    | '/_authorized/_has-organization/$organizationSlug/editor/$id'
    | '/_authorized/_has-organization/$organizationSlug/_layout/boards/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authGuardsAuthorizedRoute: typeof authGuardsAuthorizedRouteWithChildren
  authGuardsGuestOnlyRoute: typeof authGuardsGuestOnlyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest-only': {
      id: '/_guest-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authGuardsGuestOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authGuardsAuthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest-only/login': {
      id: '/_guest-only/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginRouteImport
      parentRoute: typeof authGuardsGuestOnlyRoute
    }
    '/_authorized/_has-organization': {
      id: '/_authorized/_has-organization'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof dashboardGuardsHasOrganizationRouteImport
      parentRoute: typeof authGuardsAuthorizedRoute
    }
    '/_authorized/onboarding/profile': {
      id: '/_authorized/onboarding/profile'
      path: '/onboarding/profile'
      fullPath: '/onboarding/profile'
      preLoaderRoute: typeof onboardingPagesProfileRouteImport
      parentRoute: typeof authGuardsAuthorizedRoute
    }
    '/_authorized/onboarding/organization': {
      id: '/_authorized/onboarding/organization'
      path: '/onboarding/organization'
      fullPath: '/onboarding/organization'
      preLoaderRoute: typeof onboardingPagesOrganizationRouteImport
      parentRoute: typeof authGuardsAuthorizedRoute
    }
    '/_authorized/_has-organization/$organizationSlug': {
      id: '/_authorized/_has-organization/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof dashboardGuardsSelectedOrganizationRouteImport
      parentRoute: typeof dashboardGuardsHasOrganizationRoute
    }
    '/_authorized/_has-organization/': {
      id: '/_authorized/_has-organization/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardPagesIndexPageRouteImport
      parentRoute: typeof dashboardGuardsHasOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings': {
      id: '/_authorized/_has-organization/$organizationSlug/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof settingsLayoutRouteImport
      parentRoute: typeof dashboardGuardsSelectedOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_layout': {
      id: '/_authorized/_has-organization/$organizationSlug/_layout'
      path: ''
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof dashboardLayoutRouteImport
      parentRoute: typeof dashboardGuardsSelectedOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/editor/$id': {
      id: '/_authorized/_has-organization/$organizationSlug/editor/$id'
      path: '/editor/$id'
      fullPath: '/$organizationSlug/editor/$id'
      preLoaderRoute: typeof editorIndexRouteImport
      parentRoute: typeof dashboardGuardsSelectedOrganizationRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/sessions': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/sessions'
      path: '/sessions'
      fullPath: '/$organizationSlug/settings/sessions'
      preLoaderRoute: typeof settingsPagesSessionsPageRouteImport
      parentRoute: typeof settingsLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/profile': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/profile'
      path: '/profile'
      fullPath: '/$organizationSlug/settings/profile'
      preLoaderRoute: typeof settingsPagesProfilePageRouteImport
      parentRoute: typeof settingsLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/members': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/members'
      path: '/members'
      fullPath: '/$organizationSlug/settings/members'
      preLoaderRoute: typeof settingsPagesMembersPageRouteImport
      parentRoute: typeof settingsLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/details': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/details'
      path: '/details'
      fullPath: '/$organizationSlug/settings/details'
      preLoaderRoute: typeof settingsPagesDetailsPageRouteImport
      parentRoute: typeof settingsLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/settings/$': {
      id: '/_authorized/_has-organization/$organizationSlug/settings/$'
      path: '/$'
      fullPath: '/$organizationSlug/settings/$'
      preLoaderRoute: typeof settingsPagesSplatPageRouteImport
      parentRoute: typeof settingsLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_layout/contacts': {
      id: '/_authorized/_has-organization/$organizationSlug/_layout/contacts'
      path: '/contacts'
      fullPath: '/$organizationSlug/contacts'
      preLoaderRoute: typeof dashboardPagesContactsPageRouteImport
      parentRoute: typeof dashboardLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_layout/analytics': {
      id: '/_authorized/_has-organization/$organizationSlug/_layout/analytics'
      path: '/analytics'
      fullPath: '/$organizationSlug/analytics'
      preLoaderRoute: typeof dashboardPagesAnalyticsPageRouteImport
      parentRoute: typeof dashboardLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_layout/': {
      id: '/_authorized/_has-organization/$organizationSlug/_layout/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof dashboardPagesUpdatesPageRouteImport
      parentRoute: typeof dashboardLayoutRoute
    }
    '/_authorized/_has-organization/$organizationSlug/_layout/boards/$id': {
      id: '/_authorized/_has-organization/$organizationSlug/_layout/boards/$id'
      path: '/boards/$id'
      fullPath: '/$organizationSlug/boards/$id'
      preLoaderRoute: typeof dashboardPagesBoardPageRouteImport
      parentRoute: typeof dashboardLayoutRoute
    }
  }
}

interface dashboardLayoutRouteChildren {
  dashboardPagesUpdatesPageRoute: typeof dashboardPagesUpdatesPageRoute
  dashboardPagesAnalyticsPageRoute: typeof dashboardPagesAnalyticsPageRoute
  dashboardPagesContactsPageRoute: typeof dashboardPagesContactsPageRoute
  dashboardPagesBoardPageRoute: typeof dashboardPagesBoardPageRoute
}

const dashboardLayoutRouteChildren: dashboardLayoutRouteChildren = {
  dashboardPagesUpdatesPageRoute: dashboardPagesUpdatesPageRoute,
  dashboardPagesAnalyticsPageRoute: dashboardPagesAnalyticsPageRoute,
  dashboardPagesContactsPageRoute: dashboardPagesContactsPageRoute,
  dashboardPagesBoardPageRoute: dashboardPagesBoardPageRoute,
}

const dashboardLayoutRouteWithChildren = dashboardLayoutRoute._addFileChildren(
  dashboardLayoutRouteChildren,
)

interface settingsLayoutRouteChildren {
  settingsPagesSplatPageRoute: typeof settingsPagesSplatPageRoute
  settingsPagesDetailsPageRoute: typeof settingsPagesDetailsPageRoute
  settingsPagesMembersPageRoute: typeof settingsPagesMembersPageRoute
  settingsPagesProfilePageRoute: typeof settingsPagesProfilePageRoute
  settingsPagesSessionsPageRoute: typeof settingsPagesSessionsPageRoute
}

const settingsLayoutRouteChildren: settingsLayoutRouteChildren = {
  settingsPagesSplatPageRoute: settingsPagesSplatPageRoute,
  settingsPagesDetailsPageRoute: settingsPagesDetailsPageRoute,
  settingsPagesMembersPageRoute: settingsPagesMembersPageRoute,
  settingsPagesProfilePageRoute: settingsPagesProfilePageRoute,
  settingsPagesSessionsPageRoute: settingsPagesSessionsPageRoute,
}

const settingsLayoutRouteWithChildren = settingsLayoutRoute._addFileChildren(
  settingsLayoutRouteChildren,
)

interface dashboardGuardsSelectedOrganizationRouteChildren {
  dashboardLayoutRoute: typeof dashboardLayoutRouteWithChildren
  settingsLayoutRoute: typeof settingsLayoutRouteWithChildren
  editorIndexRoute: typeof editorIndexRoute
}

const dashboardGuardsSelectedOrganizationRouteChildren: dashboardGuardsSelectedOrganizationRouteChildren =
  {
    dashboardLayoutRoute: dashboardLayoutRouteWithChildren,
    settingsLayoutRoute: settingsLayoutRouteWithChildren,
    editorIndexRoute: editorIndexRoute,
  }

const dashboardGuardsSelectedOrganizationRouteWithChildren =
  dashboardGuardsSelectedOrganizationRoute._addFileChildren(
    dashboardGuardsSelectedOrganizationRouteChildren,
  )

interface dashboardGuardsHasOrganizationRouteChildren {
  dashboardPagesIndexPageRoute: typeof dashboardPagesIndexPageRoute
  dashboardGuardsSelectedOrganizationRoute: typeof dashboardGuardsSelectedOrganizationRouteWithChildren
}

const dashboardGuardsHasOrganizationRouteChildren: dashboardGuardsHasOrganizationRouteChildren =
  {
    dashboardPagesIndexPageRoute: dashboardPagesIndexPageRoute,
    dashboardGuardsSelectedOrganizationRoute:
      dashboardGuardsSelectedOrganizationRouteWithChildren,
  }

const dashboardGuardsHasOrganizationRouteWithChildren =
  dashboardGuardsHasOrganizationRoute._addFileChildren(
    dashboardGuardsHasOrganizationRouteChildren,
  )

interface authGuardsAuthorizedRouteChildren {
  dashboardGuardsHasOrganizationRoute: typeof dashboardGuardsHasOrganizationRouteWithChildren
  onboardingPagesOrganizationRoute: typeof onboardingPagesOrganizationRoute
  onboardingPagesProfileRoute: typeof onboardingPagesProfileRoute
}

const authGuardsAuthorizedRouteChildren: authGuardsAuthorizedRouteChildren = {
  dashboardGuardsHasOrganizationRoute:
    dashboardGuardsHasOrganizationRouteWithChildren,
  onboardingPagesOrganizationRoute: onboardingPagesOrganizationRoute,
  onboardingPagesProfileRoute: onboardingPagesProfileRoute,
}

const authGuardsAuthorizedRouteWithChildren =
  authGuardsAuthorizedRoute._addFileChildren(authGuardsAuthorizedRouteChildren)

interface authGuardsGuestOnlyRouteChildren {
  authPagesLoginRoute: typeof authPagesLoginRoute
}

const authGuardsGuestOnlyRouteChildren: authGuardsGuestOnlyRouteChildren = {
  authPagesLoginRoute: authPagesLoginRoute,
}

const authGuardsGuestOnlyRouteWithChildren =
  authGuardsGuestOnlyRoute._addFileChildren(authGuardsGuestOnlyRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authGuardsAuthorizedRoute: authGuardsAuthorizedRouteWithChildren,
  authGuardsGuestOnlyRoute: authGuardsGuestOnlyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
