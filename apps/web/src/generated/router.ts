/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../modules/root'
import { Route as authPagesSignupImport } from './../modules/auth/pages/signup'
import { Route as authPagesLoginImport } from './../modules/auth/pages/login'
import { Route as sharedLayoutsAuthorizedImport } from './../modules/shared/layouts/authorized'
import { Route as dashboardDashboardlayoutImport } from './../modules/dashboard/Dashboard.layout'
import { Route as dashboardPagesUpdatesIndexImport } from './../modules/dashboard/pages/updates/index'
import { Route as dashboardPagesIndexImport } from './../modules/dashboard/pages/index'
import { Route as settingsSettingslayoutImport } from './../modules/settings/Settings.layout'
import { Route as dashboardPagesContactsImport } from './../modules/dashboard/pages/contacts'
import { Route as settingsPagesSessionsImport } from './../modules/settings/pages/sessions'
import { Route as settingsPagesProfileImport } from './../modules/settings/pages/profile'
import { Route as settingsPagesSplatImport } from './../modules/settings/pages/splat'
import { Route as editorPagesIdImport } from './../modules/editor/pages/$id'

// Create Virtual Routes

const AuthorizedOrganizationSlugImport = createFileRoute(
  '/_authorized/$organizationSlug_',
)()
const AuthorizedOrganizationSlugEditorImport = createFileRoute(
  '/_authorized/$organizationSlug_/editor',
)()

// Create/Update Routes

const authPagesSignupRoute = authPagesSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authPagesLoginRoute = authPagesLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const sharedLayoutsAuthorizedRoute = sharedLayoutsAuthorizedImport.update({
  id: '/_authorized',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizedOrganizationSlugRoute = AuthorizedOrganizationSlugImport.update(
  {
    id: '/$organizationSlug_',
    path: '/$organizationSlug',
    getParentRoute: () => sharedLayoutsAuthorizedRoute,
  } as any,
)

const dashboardDashboardlayoutRoute = dashboardDashboardlayoutImport.update({
  id: '/$organizationSlug',
  path: '/$organizationSlug',
  getParentRoute: () => sharedLayoutsAuthorizedRoute,
} as any)

const dashboardPagesUpdatesIndexRoute = dashboardPagesUpdatesIndexImport.update(
  {
    id: '/updates',
    path: '/updates',
    getParentRoute: () => dashboardDashboardlayoutRoute,
  } as any,
)

const dashboardPagesIndexRoute = dashboardPagesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardDashboardlayoutRoute,
} as any)

const settingsSettingslayoutRoute = settingsSettingslayoutImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthorizedOrganizationSlugRoute,
} as any)

const AuthorizedOrganizationSlugEditorRoute =
  AuthorizedOrganizationSlugEditorImport.update({
    id: '/editor',
    path: '/editor',
    getParentRoute: () => AuthorizedOrganizationSlugRoute,
  } as any)

const dashboardPagesContactsRoute = dashboardPagesContactsImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => dashboardDashboardlayoutRoute,
} as any)

const settingsPagesSessionsRoute = settingsPagesSessionsImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => settingsSettingslayoutRoute,
} as any)

const settingsPagesProfileRoute = settingsPagesProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => settingsSettingslayoutRoute,
} as any)

const settingsPagesSplatRoute = settingsPagesSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => settingsSettingslayoutRoute,
} as any)

const editorPagesIdRoute = editorPagesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthorizedOrganizationSlugEditorRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorized': {
      id: '/_authorized'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof sharedLayoutsAuthorizedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authPagesLoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authPagesSignupImport
      parentRoute: typeof rootRoute
    }
    '/_authorized/$organizationSlug': {
      id: '/_authorized/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof dashboardDashboardlayoutImport
      parentRoute: typeof sharedLayoutsAuthorizedImport
    }
    '/_authorized/$organizationSlug_': {
      id: '/_authorized/$organizationSlug_'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof AuthorizedOrganizationSlugImport
      parentRoute: typeof sharedLayoutsAuthorizedImport
    }
    '/_authorized/$organizationSlug/contacts': {
      id: '/_authorized/$organizationSlug/contacts'
      path: '/contacts'
      fullPath: '/$organizationSlug/contacts'
      preLoaderRoute: typeof dashboardPagesContactsImport
      parentRoute: typeof dashboardDashboardlayoutImport
    }
    '/_authorized/$organizationSlug_/editor': {
      id: '/_authorized/$organizationSlug_/editor'
      path: '/editor'
      fullPath: '/$organizationSlug/editor'
      preLoaderRoute: typeof AuthorizedOrganizationSlugEditorImport
      parentRoute: typeof AuthorizedOrganizationSlugImport
    }
    '/_authorized/$organizationSlug_/settings': {
      id: '/_authorized/$organizationSlug_/settings'
      path: '/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof settingsSettingslayoutImport
      parentRoute: typeof AuthorizedOrganizationSlugImport
    }
    '/_authorized/$organizationSlug/': {
      id: '/_authorized/$organizationSlug/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof dashboardPagesIndexImport
      parentRoute: typeof dashboardDashboardlayoutImport
    }
    '/_authorized/$organizationSlug/updates': {
      id: '/_authorized/$organizationSlug/updates'
      path: '/updates'
      fullPath: '/$organizationSlug/updates'
      preLoaderRoute: typeof dashboardPagesUpdatesIndexImport
      parentRoute: typeof dashboardDashboardlayoutImport
    }
    '/_authorized/$organizationSlug_/editor/$id': {
      id: '/_authorized/$organizationSlug_/editor/$id'
      path: '/$id'
      fullPath: '/$organizationSlug/editor/$id'
      preLoaderRoute: typeof editorPagesIdImport
      parentRoute: typeof AuthorizedOrganizationSlugEditorImport
    }
    '/_authorized/$organizationSlug_/settings/$': {
      id: '/_authorized/$organizationSlug_/settings/$'
      path: '/$'
      fullPath: '/$organizationSlug/settings/$'
      preLoaderRoute: typeof settingsPagesSplatImport
      parentRoute: typeof settingsSettingslayoutImport
    }
    '/_authorized/$organizationSlug_/settings/profile': {
      id: '/_authorized/$organizationSlug_/settings/profile'
      path: '/profile'
      fullPath: '/$organizationSlug/settings/profile'
      preLoaderRoute: typeof settingsPagesProfileImport
      parentRoute: typeof settingsSettingslayoutImport
    }
    '/_authorized/$organizationSlug_/settings/sessions': {
      id: '/_authorized/$organizationSlug_/settings/sessions'
      path: '/sessions'
      fullPath: '/$organizationSlug/settings/sessions'
      preLoaderRoute: typeof settingsPagesSessionsImport
      parentRoute: typeof settingsSettingslayoutImport
    }
  }
}

// Create and export the route tree

interface dashboardDashboardlayoutRouteChildren {
  dashboardPagesContactsRoute: typeof dashboardPagesContactsRoute
  dashboardPagesIndexRoute: typeof dashboardPagesIndexRoute
  dashboardPagesUpdatesIndexRoute: typeof dashboardPagesUpdatesIndexRoute
}

const dashboardDashboardlayoutRouteChildren: dashboardDashboardlayoutRouteChildren =
  {
    dashboardPagesContactsRoute: dashboardPagesContactsRoute,
    dashboardPagesIndexRoute: dashboardPagesIndexRoute,
    dashboardPagesUpdatesIndexRoute: dashboardPagesUpdatesIndexRoute,
  }

const dashboardDashboardlayoutRouteWithChildren =
  dashboardDashboardlayoutRoute._addFileChildren(
    dashboardDashboardlayoutRouteChildren,
  )

interface AuthorizedOrganizationSlugEditorRouteChildren {
  editorPagesIdRoute: typeof editorPagesIdRoute
}

const AuthorizedOrganizationSlugEditorRouteChildren: AuthorizedOrganizationSlugEditorRouteChildren =
  {
    editorPagesIdRoute: editorPagesIdRoute,
  }

const AuthorizedOrganizationSlugEditorRouteWithChildren =
  AuthorizedOrganizationSlugEditorRoute._addFileChildren(
    AuthorizedOrganizationSlugEditorRouteChildren,
  )

interface settingsSettingslayoutRouteChildren {
  settingsPagesSplatRoute: typeof settingsPagesSplatRoute
  settingsPagesProfileRoute: typeof settingsPagesProfileRoute
  settingsPagesSessionsRoute: typeof settingsPagesSessionsRoute
}

const settingsSettingslayoutRouteChildren: settingsSettingslayoutRouteChildren =
  {
    settingsPagesSplatRoute: settingsPagesSplatRoute,
    settingsPagesProfileRoute: settingsPagesProfileRoute,
    settingsPagesSessionsRoute: settingsPagesSessionsRoute,
  }

const settingsSettingslayoutRouteWithChildren =
  settingsSettingslayoutRoute._addFileChildren(
    settingsSettingslayoutRouteChildren,
  )

interface AuthorizedOrganizationSlugRouteChildren {
  AuthorizedOrganizationSlugEditorRoute: typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  settingsSettingslayoutRoute: typeof settingsSettingslayoutRouteWithChildren
}

const AuthorizedOrganizationSlugRouteChildren: AuthorizedOrganizationSlugRouteChildren =
  {
    AuthorizedOrganizationSlugEditorRoute:
      AuthorizedOrganizationSlugEditorRouteWithChildren,
    settingsSettingslayoutRoute: settingsSettingslayoutRouteWithChildren,
  }

const AuthorizedOrganizationSlugRouteWithChildren =
  AuthorizedOrganizationSlugRoute._addFileChildren(
    AuthorizedOrganizationSlugRouteChildren,
  )

interface sharedLayoutsAuthorizedRouteChildren {
  dashboardDashboardlayoutRoute: typeof dashboardDashboardlayoutRouteWithChildren
  AuthorizedOrganizationSlugRoute: typeof AuthorizedOrganizationSlugRouteWithChildren
}

const sharedLayoutsAuthorizedRouteChildren: sharedLayoutsAuthorizedRouteChildren =
  {
    dashboardDashboardlayoutRoute: dashboardDashboardlayoutRouteWithChildren,
    AuthorizedOrganizationSlugRoute:
      AuthorizedOrganizationSlugRouteWithChildren,
  }

const sharedLayoutsAuthorizedRouteWithChildren =
  sharedLayoutsAuthorizedRoute._addFileChildren(
    sharedLayoutsAuthorizedRouteChildren,
  )

export interface FileRoutesByFullPath {
  '': typeof sharedLayoutsAuthorizedRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/$organizationSlug': typeof AuthorizedOrganizationSlugRouteWithChildren
  '/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/$organizationSlug/editor': typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  '/$organizationSlug/settings': typeof settingsSettingslayoutRouteWithChildren
  '/$organizationSlug/': typeof dashboardPagesIndexRoute
  '/$organizationSlug/updates': typeof dashboardPagesUpdatesIndexRoute
  '/$organizationSlug/editor/$id': typeof editorPagesIdRoute
  '/$organizationSlug/settings/$': typeof settingsPagesSplatRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
}

export interface FileRoutesByTo {
  '': typeof sharedLayoutsAuthorizedRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/$organizationSlug': typeof dashboardPagesIndexRoute
  '/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/$organizationSlug/editor': typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  '/$organizationSlug/settings': typeof settingsSettingslayoutRouteWithChildren
  '/$organizationSlug/updates': typeof dashboardPagesUpdatesIndexRoute
  '/$organizationSlug/editor/$id': typeof editorPagesIdRoute
  '/$organizationSlug/settings/$': typeof settingsPagesSplatRoute
  '/$organizationSlug/settings/profile': typeof settingsPagesProfileRoute
  '/$organizationSlug/settings/sessions': typeof settingsPagesSessionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authorized': typeof sharedLayoutsAuthorizedRouteWithChildren
  '/login': typeof authPagesLoginRoute
  '/signup': typeof authPagesSignupRoute
  '/_authorized/$organizationSlug': typeof dashboardDashboardlayoutRouteWithChildren
  '/_authorized/$organizationSlug_': typeof AuthorizedOrganizationSlugRouteWithChildren
  '/_authorized/$organizationSlug/contacts': typeof dashboardPagesContactsRoute
  '/_authorized/$organizationSlug_/editor': typeof AuthorizedOrganizationSlugEditorRouteWithChildren
  '/_authorized/$organizationSlug_/settings': typeof settingsSettingslayoutRouteWithChildren
  '/_authorized/$organizationSlug/': typeof dashboardPagesIndexRoute
  '/_authorized/$organizationSlug/updates': typeof dashboardPagesUpdatesIndexRoute
  '/_authorized/$organizationSlug_/editor/$id': typeof editorPagesIdRoute
  '/_authorized/$organizationSlug_/settings/$': typeof settingsPagesSplatRoute
  '/_authorized/$organizationSlug_/settings/profile': typeof settingsPagesProfileRoute
  '/_authorized/$organizationSlug_/settings/sessions': typeof settingsPagesSessionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/$organizationSlug'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/editor'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/signup'
    | '/$organizationSlug'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/editor'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/profile'
    | '/$organizationSlug/settings/sessions'
  id:
    | '__root__'
    | '/_authorized'
    | '/login'
    | '/signup'
    | '/_authorized/$organizationSlug'
    | '/_authorized/$organizationSlug_'
    | '/_authorized/$organizationSlug/contacts'
    | '/_authorized/$organizationSlug_/editor'
    | '/_authorized/$organizationSlug_/settings'
    | '/_authorized/$organizationSlug/'
    | '/_authorized/$organizationSlug/updates'
    | '/_authorized/$organizationSlug_/editor/$id'
    | '/_authorized/$organizationSlug_/settings/$'
    | '/_authorized/$organizationSlug_/settings/profile'
    | '/_authorized/$organizationSlug_/settings/sessions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  sharedLayoutsAuthorizedRoute: typeof sharedLayoutsAuthorizedRouteWithChildren
  authPagesLoginRoute: typeof authPagesLoginRoute
  authPagesSignupRoute: typeof authPagesSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  sharedLayoutsAuthorizedRoute: sharedLayoutsAuthorizedRouteWithChildren,
  authPagesLoginRoute: authPagesLoginRoute,
  authPagesSignupRoute: authPagesSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "root.tsx",
      "children": [
        "/_authorized",
        "/login",
        "/signup"
      ]
    },
    "/_authorized": {
      "filePath": "shared/layouts/authorized.tsx",
      "children": [
        "/_authorized/$organizationSlug",
        "/_authorized/$organizationSlug_"
      ]
    },
    "/login": {
      "filePath": "auth/pages/login.tsx"
    },
    "/signup": {
      "filePath": "auth/pages/signup.tsx"
    },
    "/_authorized/$organizationSlug": {
      "filePath": "dashboard/Dashboard.layout.tsx",
      "parent": "/_authorized",
      "children": [
        "/_authorized/$organizationSlug/contacts",
        "/_authorized/$organizationSlug/",
        "/_authorized/$organizationSlug/updates"
      ]
    },
    "/_authorized/$organizationSlug_": {
      "filePath": "",
      "parent": "/_authorized",
      "children": [
        "/_authorized/$organizationSlug_/editor",
        "/_authorized/$organizationSlug_/settings"
      ]
    },
    "/_authorized/$organizationSlug/contacts": {
      "filePath": "dashboard/pages/contacts.tsx",
      "parent": "/_authorized/$organizationSlug"
    },
    "/_authorized/$organizationSlug_/editor": {
      "filePath": "",
      "parent": "/_authorized/$organizationSlug_",
      "children": [
        "/_authorized/$organizationSlug_/editor/$id"
      ]
    },
    "/_authorized/$organizationSlug_/settings": {
      "filePath": "settings/Settings.layout.tsx",
      "parent": "/_authorized/$organizationSlug_",
      "children": [
        "/_authorized/$organizationSlug_/settings/$",
        "/_authorized/$organizationSlug_/settings/profile",
        "/_authorized/$organizationSlug_/settings/sessions"
      ]
    },
    "/_authorized/$organizationSlug/": {
      "filePath": "dashboard/pages/index.tsx",
      "parent": "/_authorized/$organizationSlug"
    },
    "/_authorized/$organizationSlug/updates": {
      "filePath": "dashboard/pages/updates/index.tsx",
      "parent": "/_authorized/$organizationSlug"
    },
    "/_authorized/$organizationSlug_/editor/$id": {
      "filePath": "editor/pages/$id.tsx",
      "parent": "/_authorized/$organizationSlug_/editor"
    },
    "/_authorized/$organizationSlug_/settings/$": {
      "filePath": "settings/pages/splat.tsx",
      "parent": "/_authorized/$organizationSlug_/settings"
    },
    "/_authorized/$organizationSlug_/settings/profile": {
      "filePath": "settings/pages/profile.tsx",
      "parent": "/_authorized/$organizationSlug_/settings"
    },
    "/_authorized/$organizationSlug_/settings/sessions": {
      "filePath": "settings/pages/sessions.tsx",
      "parent": "/_authorized/$organizationSlug_/settings"
    }
  }
}
ROUTE_MANIFEST_END */
