/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as AppRouteImport } from './../routes/_app/route'
import { Route as AppIndexImport } from './../routes/_app/index'
import { Route as AppUpdatesImport } from './../routes/_app/updates'
import { Route as AppSettingsImport } from './../routes/_app/settings'
import { Route as AppNewImport } from './../routes/_app/new'
import { Route as authSignupImport } from './../routes/(auth)/signup'
import { Route as authLoginImport } from './../routes/(auth)/login'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppUpdatesRoute = AppUpdatesImport.update({
  id: '/updates',
  path: '/updates',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppNewRoute = AppNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRouteRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/_app/new': {
      id: '/_app/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof AppNewImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/updates': {
      id: '/_app/updates'
      path: '/updates'
      fullPath: '/updates'
      preLoaderRoute: typeof AppUpdatesImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppNewRoute: typeof AppNewRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppUpdatesRoute: typeof AppUpdatesRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppNewRoute: AppNewRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppUpdatesRoute: AppUpdatesRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/new': typeof AppNewRoute
  '/settings': typeof AppSettingsRoute
  '/updates': typeof AppUpdatesRoute
  '/': typeof AppIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/new': typeof AppNewRoute
  '/settings': typeof AppSettingsRoute
  '/updates': typeof AppUpdatesRoute
  '/': typeof AppIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/_app/new': typeof AppNewRoute
  '/_app/settings': typeof AppSettingsRoute
  '/_app/updates': typeof AppUpdatesRoute
  '/_app/': typeof AppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/signup' | '/new' | '/settings' | '/updates' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/new' | '/settings' | '/updates' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/_app/new'
    | '/_app/settings'
    | '/_app/updates'
    | '/_app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/new",
        "/_app/settings",
        "/_app/updates",
        "/_app/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/_app/new": {
      "filePath": "_app/new.tsx",
      "parent": "/_app"
    },
    "/_app/settings": {
      "filePath": "_app/settings.tsx",
      "parent": "/_app"
    },
    "/_app/updates": {
      "filePath": "_app/updates.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
