/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as AppRouteImport } from './../routes/_app/route'
import { Route as authSignupImport } from './../routes/(auth)/signup'
import { Route as authLoginImport } from './../routes/(auth)/login'
import { Route as AppOrganizationSlugRouteImport } from './../routes/_app/$organizationSlug/route'
import { Route as AppOrganizationSlugIndexImport } from './../routes/_app/$organizationSlug/index'
import { Route as AppOrganizationSlugUpdatesImport } from './../routes/_app/$organizationSlug/updates'
import { Route as AppOrganizationSlugContactsImport } from './../routes/_app/$organizationSlug/contacts'
import { Route as AppOrganizationSlugSettingsRouteImport } from './../routes/_app/$organizationSlug_/settings/route'
import { Route as AppOrganizationSlugSettingsAccountImport } from './../routes/_app/$organizationSlug_/settings/account'
import { Route as AppOrganizationSlugSettingsSplatImport } from './../routes/_app/$organizationSlug_/settings/$'
import { Route as AppOrganizationSlugEditorIdImport } from './../routes/_app/$organizationSlug_/editor/$id'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppOrganizationSlugRouteRoute = AppOrganizationSlugRouteImport.update({
  id: '/$organizationSlug',
  path: '/$organizationSlug',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppOrganizationSlugIndexRoute = AppOrganizationSlugIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppOrganizationSlugRouteRoute,
} as any)

const AppOrganizationSlugUpdatesRoute = AppOrganizationSlugUpdatesImport.update(
  {
    id: '/updates',
    path: '/updates',
    getParentRoute: () => AppOrganizationSlugRouteRoute,
  } as any,
)

const AppOrganizationSlugContactsRoute =
  AppOrganizationSlugContactsImport.update({
    id: '/contacts',
    path: '/contacts',
    getParentRoute: () => AppOrganizationSlugRouteRoute,
  } as any)

const AppOrganizationSlugSettingsRouteRoute =
  AppOrganizationSlugSettingsRouteImport.update({
    id: '/$organizationSlug_/settings',
    path: '/$organizationSlug/settings',
    getParentRoute: () => AppRouteRoute,
  } as any)

const AppOrganizationSlugSettingsAccountRoute =
  AppOrganizationSlugSettingsAccountImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AppOrganizationSlugSettingsRouteRoute,
  } as any)

const AppOrganizationSlugSettingsSplatRoute =
  AppOrganizationSlugSettingsSplatImport.update({
    id: '/$',
    path: '/$',
    getParentRoute: () => AppOrganizationSlugSettingsRouteRoute,
  } as any)

const AppOrganizationSlugEditorIdRoute =
  AppOrganizationSlugEditorIdImport.update({
    id: '/$organizationSlug_/editor/$id',
    path: '/$organizationSlug/editor/$id',
    getParentRoute: () => AppRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/_app/$organizationSlug': {
      id: '/_app/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof AppOrganizationSlugRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/_app/$organizationSlug_/settings': {
      id: '/_app/$organizationSlug_/settings'
      path: '/$organizationSlug/settings'
      fullPath: '/$organizationSlug/settings'
      preLoaderRoute: typeof AppOrganizationSlugSettingsRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/$organizationSlug/contacts': {
      id: '/_app/$organizationSlug/contacts'
      path: '/contacts'
      fullPath: '/$organizationSlug/contacts'
      preLoaderRoute: typeof AppOrganizationSlugContactsImport
      parentRoute: typeof AppOrganizationSlugRouteImport
    }
    '/_app/$organizationSlug/updates': {
      id: '/_app/$organizationSlug/updates'
      path: '/updates'
      fullPath: '/$organizationSlug/updates'
      preLoaderRoute: typeof AppOrganizationSlugUpdatesImport
      parentRoute: typeof AppOrganizationSlugRouteImport
    }
    '/_app/$organizationSlug/': {
      id: '/_app/$organizationSlug/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof AppOrganizationSlugIndexImport
      parentRoute: typeof AppOrganizationSlugRouteImport
    }
    '/_app/$organizationSlug_/editor/$id': {
      id: '/_app/$organizationSlug_/editor/$id'
      path: '/$organizationSlug/editor/$id'
      fullPath: '/$organizationSlug/editor/$id'
      preLoaderRoute: typeof AppOrganizationSlugEditorIdImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/$organizationSlug_/settings/$': {
      id: '/_app/$organizationSlug_/settings/$'
      path: '/$'
      fullPath: '/$organizationSlug/settings/$'
      preLoaderRoute: typeof AppOrganizationSlugSettingsSplatImport
      parentRoute: typeof AppOrganizationSlugSettingsRouteImport
    }
    '/_app/$organizationSlug_/settings/account': {
      id: '/_app/$organizationSlug_/settings/account'
      path: '/account'
      fullPath: '/$organizationSlug/settings/account'
      preLoaderRoute: typeof AppOrganizationSlugSettingsAccountImport
      parentRoute: typeof AppOrganizationSlugSettingsRouteImport
    }
  }
}

// Create and export the route tree

interface AppOrganizationSlugRouteRouteChildren {
  AppOrganizationSlugContactsRoute: typeof AppOrganizationSlugContactsRoute
  AppOrganizationSlugUpdatesRoute: typeof AppOrganizationSlugUpdatesRoute
  AppOrganizationSlugIndexRoute: typeof AppOrganizationSlugIndexRoute
}

const AppOrganizationSlugRouteRouteChildren: AppOrganizationSlugRouteRouteChildren =
  {
    AppOrganizationSlugContactsRoute: AppOrganizationSlugContactsRoute,
    AppOrganizationSlugUpdatesRoute: AppOrganizationSlugUpdatesRoute,
    AppOrganizationSlugIndexRoute: AppOrganizationSlugIndexRoute,
  }

const AppOrganizationSlugRouteRouteWithChildren =
  AppOrganizationSlugRouteRoute._addFileChildren(
    AppOrganizationSlugRouteRouteChildren,
  )

interface AppOrganizationSlugSettingsRouteRouteChildren {
  AppOrganizationSlugSettingsSplatRoute: typeof AppOrganizationSlugSettingsSplatRoute
  AppOrganizationSlugSettingsAccountRoute: typeof AppOrganizationSlugSettingsAccountRoute
}

const AppOrganizationSlugSettingsRouteRouteChildren: AppOrganizationSlugSettingsRouteRouteChildren =
  {
    AppOrganizationSlugSettingsSplatRoute:
      AppOrganizationSlugSettingsSplatRoute,
    AppOrganizationSlugSettingsAccountRoute:
      AppOrganizationSlugSettingsAccountRoute,
  }

const AppOrganizationSlugSettingsRouteRouteWithChildren =
  AppOrganizationSlugSettingsRouteRoute._addFileChildren(
    AppOrganizationSlugSettingsRouteRouteChildren,
  )

interface AppRouteRouteChildren {
  AppOrganizationSlugRouteRoute: typeof AppOrganizationSlugRouteRouteWithChildren
  AppOrganizationSlugSettingsRouteRoute: typeof AppOrganizationSlugSettingsRouteRouteWithChildren
  AppOrganizationSlugEditorIdRoute: typeof AppOrganizationSlugEditorIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppOrganizationSlugRouteRoute: AppOrganizationSlugRouteRouteWithChildren,
  AppOrganizationSlugSettingsRouteRoute:
    AppOrganizationSlugSettingsRouteRouteWithChildren,
  AppOrganizationSlugEditorIdRoute: AppOrganizationSlugEditorIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppRouteRouteWithChildren
  '/$organizationSlug': typeof AppOrganizationSlugRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/$organizationSlug/settings': typeof AppOrganizationSlugSettingsRouteRouteWithChildren
  '/$organizationSlug/contacts': typeof AppOrganizationSlugContactsRoute
  '/$organizationSlug/updates': typeof AppOrganizationSlugUpdatesRoute
  '/$organizationSlug/': typeof AppOrganizationSlugIndexRoute
  '/$organizationSlug/editor/$id': typeof AppOrganizationSlugEditorIdRoute
  '/$organizationSlug/settings/$': typeof AppOrganizationSlugSettingsSplatRoute
  '/$organizationSlug/settings/account': typeof AppOrganizationSlugSettingsAccountRoute
}

export interface FileRoutesByTo {
  '': typeof AppRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/$organizationSlug/settings': typeof AppOrganizationSlugSettingsRouteRouteWithChildren
  '/$organizationSlug/contacts': typeof AppOrganizationSlugContactsRoute
  '/$organizationSlug/updates': typeof AppOrganizationSlugUpdatesRoute
  '/$organizationSlug': typeof AppOrganizationSlugIndexRoute
  '/$organizationSlug/editor/$id': typeof AppOrganizationSlugEditorIdRoute
  '/$organizationSlug/settings/$': typeof AppOrganizationSlugSettingsSplatRoute
  '/$organizationSlug/settings/account': typeof AppOrganizationSlugSettingsAccountRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_app/$organizationSlug': typeof AppOrganizationSlugRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/_app/$organizationSlug_/settings': typeof AppOrganizationSlugSettingsRouteRouteWithChildren
  '/_app/$organizationSlug/contacts': typeof AppOrganizationSlugContactsRoute
  '/_app/$organizationSlug/updates': typeof AppOrganizationSlugUpdatesRoute
  '/_app/$organizationSlug/': typeof AppOrganizationSlugIndexRoute
  '/_app/$organizationSlug_/editor/$id': typeof AppOrganizationSlugEditorIdRoute
  '/_app/$organizationSlug_/settings/$': typeof AppOrganizationSlugSettingsSplatRoute
  '/_app/$organizationSlug_/settings/account': typeof AppOrganizationSlugSettingsAccountRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/$organizationSlug'
    | '/login'
    | '/signup'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/updates'
    | '/$organizationSlug/'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/account'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/signup'
    | '/$organizationSlug/settings'
    | '/$organizationSlug/contacts'
    | '/$organizationSlug/updates'
    | '/$organizationSlug'
    | '/$organizationSlug/editor/$id'
    | '/$organizationSlug/settings/$'
    | '/$organizationSlug/settings/account'
  id:
    | '__root__'
    | '/_app'
    | '/_app/$organizationSlug'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/_app/$organizationSlug_/settings'
    | '/_app/$organizationSlug/contacts'
    | '/_app/$organizationSlug/updates'
    | '/_app/$organizationSlug/'
    | '/_app/$organizationSlug_/editor/$id'
    | '/_app/$organizationSlug_/settings/$'
    | '/_app/$organizationSlug_/settings/account'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/$organizationSlug",
        "/_app/$organizationSlug_/settings",
        "/_app/$organizationSlug_/editor/$id"
      ]
    },
    "/_app/$organizationSlug": {
      "filePath": "_app/$organizationSlug/route.tsx",
      "parent": "/_app",
      "children": [
        "/_app/$organizationSlug/contacts",
        "/_app/$organizationSlug/updates",
        "/_app/$organizationSlug/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/_app/$organizationSlug_/settings": {
      "filePath": "_app/$organizationSlug_/settings/route.tsx",
      "parent": "/_app",
      "children": [
        "/_app/$organizationSlug_/settings/$",
        "/_app/$organizationSlug_/settings/account"
      ]
    },
    "/_app/$organizationSlug/contacts": {
      "filePath": "_app/$organizationSlug/contacts.tsx",
      "parent": "/_app/$organizationSlug"
    },
    "/_app/$organizationSlug/updates": {
      "filePath": "_app/$organizationSlug/updates.tsx",
      "parent": "/_app/$organizationSlug"
    },
    "/_app/$organizationSlug/": {
      "filePath": "_app/$organizationSlug/index.tsx",
      "parent": "/_app/$organizationSlug"
    },
    "/_app/$organizationSlug_/editor/$id": {
      "filePath": "_app/$organizationSlug_/editor/$id.tsx",
      "parent": "/_app"
    },
    "/_app/$organizationSlug_/settings/$": {
      "filePath": "_app/$organizationSlug_/settings/$.tsx",
      "parent": "/_app/$organizationSlug_/settings"
    },
    "/_app/$organizationSlug_/settings/account": {
      "filePath": "_app/$organizationSlug_/settings/account.tsx",
      "parent": "/_app/$organizationSlug_/settings"
    }
  }
}
ROUTE_MANIFEST_END */
